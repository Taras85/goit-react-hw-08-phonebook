{"version":3,"file":"static/js/217.594f5b81.chunk.js","mappings":"sOACA,GAAiB,E,UCDJA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEnBC,EAAe,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAIpBC,EAAY,SAAAL,GAAK,OAAIA,EAAMM,OAAOA,MAAjB,E,SCCjBC,EAAc,WACzB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXZ,GAAQa,EAAAA,EAAAA,IAAYhB,GAwB1B,OACE,kBAAMiB,UAAWC,EAAAA,KAAUC,SAbJ,SAAAC,GACvBA,EAAEC,kBAEiE,KADhD,OAAOlB,GACRmB,WAAU,SAAAC,GAAO,OAAIb,IAASa,EAAQb,IAArB,IACjCc,MAAM,GAAD,OAAId,EAAJ,6BAELI,GAASW,EAAAA,EAAAA,IAAW,CAAEf,KAAAA,EAAME,OAAAA,KAE9BD,EAAQ,IACRE,EAAU,GACX,EAGC,WACE,mBAAOI,UAAWC,EAAAA,UAAlB,UAAiC,QAE/B,kBACED,UAAWC,EAAAA,SACXQ,KAAK,OACLhB,KAAK,OACLiB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,YAAY,aACZC,MAAOrB,EACPsB,SAnCiB,SAAAZ,GACvB,IAAQW,EAAUX,EAAEa,OAAZF,MACRpB,EAAQoB,EACT,QAmCG,mBAAOd,UAAWC,EAAAA,UAAlB,UAAiC,UAE/B,kBACED,UAAWC,EAAAA,WACXQ,KAAK,MACLhB,KAAK,SACLiB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,YAAY,qBACZC,MAAOnB,EACPoB,SA5CmB,SAAAZ,GACzB,IAAQW,EAAUX,EAAEa,OAAZF,MACRlB,EAAUkB,EACX,QA4CG,mBAAQd,UAAWC,EAAAA,QAAaQ,KAAK,SAArC,SAA8C,kBAKnD,E,yGC1DD,GAA4CQ,EAAAA,EAAAA,GAAc,CACxDC,KAAI,qBACJC,aAAY,sGAFd,eAAKC,EAAL,KAA0BC,EAA1B,KAIIC,GAAQC,EAAAA,EAAAA,IAAW,SAACC,EAAOC,GAC7B,IAAMzB,GAAS0B,EAAAA,EAAAA,IAAoB,QAASF,GAC5C,GAA6CG,EAAAA,EAAAA,IAAiBH,GAAtDI,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAAWf,GAA9B,YACA,OAAuBrB,EAAAA,EAAAA,KAAI2B,EAAqB,CAAEU,MAAO9B,EAAQ+B,UAA0BtC,EAAAA,EAAAA,KACzFuC,EAAAA,EAAAA,OAD4F,QAG1FP,IAAAA,EACAQ,OAAK,QAAIC,YAAaL,GAAW7B,EAAOmC,OACxCP,WAAWQ,EAAAA,EAAAA,IAAG,eAAgBR,IAC3Bd,KAGR,IACDQ,EAAM,YAAc,QCrBpB,IAAIE,GAAQa,EAAAA,EAAAA,IAAW,SAACZ,EAAOL,GAC7B,IAAMkB,EAASN,IACf,OAAuBV,EAAAA,EAAAA,KAAIC,EAAAA,EAAAA,OAAD,kBAAoBE,GAApB,IAA2BL,IAAAA,EAAK,MAAOkB,EAAOH,QACzE,ICHGX,GAAKe,EAAAA,EAAAA,IAAW,SAACd,EAAOL,GAC1B,IAAMoB,EAASR,IACf,OAAuBV,EAAAA,EAAAA,KAAIC,EAAAA,EAAAA,IAAD,kBAAiBE,GAAjB,IAAwBL,IAAAA,EAAK,MAAOoB,EAAOL,KACtE,I,gBCHGM,GAAKC,EAAAA,EAAAA,IACP,WAAyBC,GAAQ,IAA9BlB,EAA8B,EAA9BA,UAAcL,GAAgB,YACzBwB,EAASZ,IACf,OAAuBR,EAAAA,EAAAA,KACrBD,EAAAA,EAAAA,IADwB,kBAGnBH,GAHmB,IAItBuB,IAAAA,EACA,MAAOC,EAAOT,GACd,kBAAmBV,IAGxB,ICZCD,GAAQqB,EAAAA,EAAAA,IAAW,SAACpB,EAAOL,GAC7B,IAAM0B,EAASd,IACf,OAAuBV,EAAAA,EAAAA,KAAIC,EAAAA,EAAAA,OAAD,kBAAoBE,GAApB,IAA2BL,IAAAA,EAAK,MAAO0B,EAAOX,QACzE,I,gBCHGM,GAAKM,EAAAA,EAAAA,IACP,WAAyBJ,GAAQ,IAA9BlB,EAA8B,EAA9BA,UAAcL,GAAgB,YACzB4B,EAAShB,IACf,OAAuBR,EAAAA,EAAAA,KACrBD,EAAAA,EAAAA,IADwB,kBAGnBH,GAHmB,IAItBuB,IAAAA,EACA,MAAOK,EAAOb,GACd,kBAAmBV,IAGxB,I,UCJUwB,EAAc,WACzB,IAEMC,EAbmB,SAACjE,EAAUK,GACpC,OAAKA,EAGIL,EAASK,QAAO,SAAAgB,GACrB,OAAOA,EAAQb,KAAK0D,cAAcC,SAAS9D,EAAO6D,cACnD,IAJMlE,CAMV,CAKyBoE,EAFPtD,EAAAA,EAAAA,IAAYhB,IACdgB,EAAAA,EAAAA,IAAYV,IAGrBQ,GAAWC,EAAAA,EAAAA,MAGjB,OACE,UAACuB,EAAD,CAAOiC,QAAQ,SAASC,SAAS,MAAjC,WACE,SAAClB,EAAD,WACE,UAACE,EAAD,YACE,SAACG,EAAD,UAAI,UACJ,SAACA,EAAD,UAAI,YACJ,SAACA,EAAD,UAGJ,SAACG,EAAD,UACGK,EAAgBM,KAAI,SAAClD,EAASmD,GAAV,OACnB,UAAClB,EAAD,YACE,SAACQ,EAAD,UAAKzC,EAAQb,QACb,UAACsD,EAAD,WAAKzC,EAAQX,OAAO,QACpB,UAACoD,EAAD,WACG,KAQD,SAAC,IAAD,CACEW,YAAY,OACZJ,QAAQ,UACR7C,KAAK,SACLkD,QAAS,kBA7BF,SAAAF,GAAE,OAAI5D,GAAS+D,EAAAA,EAAAA,IAAWH,GAAxB,CA6BMI,CAAavD,EAAQmD,GAA3B,EAJX,SAKC,gBAjBIA,EADU,QA2B5B,EC5DD,GAAiB,E,UCIJK,EAAS,WACpB,IAAMjE,GAAWC,EAAAA,EAAAA,MACXR,GAASS,EAAAA,EAAAA,IAAYV,GAM3B,OACE,4BACE,kBAAOW,UAAWC,EAAAA,YAAlB,SAAmC,4BACnC,kBACED,UAAWC,EAAAA,WACXQ,KAAK,OACLhB,KAAK,SACLoB,YAAY,eACZC,MAAOxB,EACPyB,SAbe,SAAAZ,GACnBN,GAASkE,EAAAA,EAAAA,GAAU5D,EAAEa,OAAOF,OAC7B,MAeF,ECjBc,SAASkD,IACtB,IAAMnE,GAAWC,EAAAA,EAAAA,MACXV,GAAYW,EAAAA,EAAAA,IAAYZ,GAM9B,OAJA8E,EAAAA,EAAAA,YAAU,WACRpE,GAASqE,EAAAA,EAAAA,MACV,GAAE,CAACrE,KAGF,iCAGM,2BAAO,eAET,SAACN,EAAD,KACA,yBAAMH,GAAa,4BACnB,SAAC0E,EAAD,KACA,SAACb,EAAD,MAIP,C,uGC1BD,GAA4ChC,E,QAAAA,GAAc,CACxDkD,QAAQ,EACR1E,KAAM,uBAFR,eAA0B2E,GAA1B,W,wDCGA,SAAS9C,EAAWQ,GAChB,IAAM9B,EAAiC8B,EAAjC9B,SAAU2C,EAAuBb,EAAvBa,UAAc0B,GAAhC,OAAyCvC,EAAzC,GACMwC,GAAYC,EAAAA,EAAAA,gBAAevE,IAAYwE,EAAAA,EAAAA,cAAaxE,EAAU,CAC9D,eAAW,EACfyE,WAAW,IACRzE,EACC0E,GAAatC,EAAAA,EAAAA,IAAG,sBAAuBO,GAC7C,OAAuBgC,EAAAA,EAAAA,KACrB3C,EAAAA,EAAAA,MADwB,gBAGtB4C,QAAS,cACTC,UAAW,SACX3C,WAAY,GACTmC,GANmB,IAOtB1B,UAAW+B,EACX1E,SAAUsE,IAGf,CACDhD,EAAW,YAAc,a,yFClBzB,SAASA,EAAcwD,GACrB,IACEC,EAOED,EAPFC,MACAC,EAMEF,EANFE,UAFF,EAQIF,EALFhD,QAAAA,OAHF,MAGY,SAHZ,IAQIgD,EAJFG,SAAAA,OAJF,OAI6BC,EAAAA,EAAAA,KAAIC,EAAAA,EAAS,CAAEC,MAAO,eAAgBC,MAAO,MAAOrF,OAAQ,QAJzF,EAKEmC,EAGE2C,EAHF3C,UACAQ,EAEEmC,EAFFnC,MACG8B,GAPL,OAQIK,EARJ,GASMQ,GAAalD,EAAAA,EAAAA,IAAG,yBAA0BD,GAC1CoD,EAA2B,UAAdP,EAAwB,YAAc,cACnDQ,GAAgBC,EAAAA,EAAAA,UACpB,mCACEC,QAAS,OACTC,WAAY,SACZC,SAAUb,EAAQ,WAAa,aAHjC,SAIGQ,EAAaR,EAAQjD,EAAU,IAJlC,oBAKY,QALZ,sBAMc,UANd,GAOKa,EAPL,GASA,CAACA,EAAOoC,EAAOQ,EAAYzD,IAE3B,OAAqBoD,EAAAA,EAAAA,KAAIlD,EAAAA,EAAAA,KAAD,gBAAeG,UAAWmD,GAAeb,GAAzC,IAA+C9B,MAAO6C,EAAeP,SAAAA,IAChG,CACD3D,EAAc,YAAc,gB,uMCTxBG,GAASoE,EAAAA,EAAAA,IAAW,SAACC,EAAO1G,GAC9B,IAAM2G,EAAQ/D,IACRF,GAASkE,EAAAA,EAAAA,IAAe,UAAD,kBAAgBD,GAAUD,IACvD,GAeIL,EAAAA,EAAAA,IAAiBK,GAfrB,IACEG,WAAAA,OADF,MACwB,MAATF,OAAgB,EAASA,EAAME,WAD9C,EAEEC,EAFF,EAEEA,UACAC,EAHF,EAGEA,SACAC,EAJF,EAIEA,SACA3F,EALF,EAKEA,SACA4F,EANF,EAMEA,UACAC,EAPF,EAOEA,YAPF,IAQEtG,YAAAA,OARF,MAQgB,SARhB,EASEuG,EATF,EASEA,KACA5D,EAVF,EAUEA,QAVF,IAWE6D,iBAAAA,OAXF,MAWqB,QAXrB,EAYEC,EAZF,EAYEA,UACAC,EAbF,EAaEA,GACGlB,GAdL,YAgBMmB,GAAerF,EAAAA,EAAAA,UAAQ,WAC3B,IAAMoE,GAAM,kBAAkB,MAAV5D,OAAiB,EAASA,EAAM,QAAxC,IAAoD8E,OAAQ,IACxE,uBACEC,QAAS,cACTlB,WAAY,OACZmB,WAAY,SACZC,eAAgB,SAChBC,WAAY,OACZC,SAAU,WACVC,WAAY,SACZC,cAAe,SACfC,QAAS,QACNtF,KACEiE,GAAS,CAAEL,OAAAA,GAEnB,GAAE,CAAC5D,EAAQiE,IACZ,ECxDF,SAAuBjF,GACnB,IAAF,GAAgCtB,EAAAA,EAAAA,WAAUsB,GAA1C,eAAOuG,EAAP,KAAiBC,EAAjB,KAOA,MAAO,CAAE9F,KANW+F,EAAAA,EAAAA,cAAY,SAACC,GAC1BA,GAELF,EAA6B,WAAjBE,EAAKC,QAClB,GAAE,IAEwBhH,KADd4G,EAAW,cAAW,EAEpC,CD+C0CK,CAAchB,GAA1CiB,EAAb,EAAQvI,IAAiB+C,EAAzB,EAAmBoE,KACbqB,EAAe,CAAEvB,UAAAA,EAAW5F,SAAAA,EAAUT,YAAAA,EAAaoG,SAAAA,GACvD,OAAqBhC,EAAAA,EAAAA,MACrBhC,EAAAA,EAAAA,QADyB,gBAGvBhD,KAAKyI,EAAAA,EAAAA,IAAazI,EAAKuI,GACvBjB,GAAAA,EACAH,KAAc,MAARA,EAAeA,EAAOpE,EAC5B,eAAe2F,EAAAA,EAAAA,IAAS3B,GACxB,gBAAgB2B,EAAAA,EAAAA,IAAS5B,GACzBpB,MAAO6B,EACPF,WAAWsB,EAAAA,EAAAA,IAAG,gBAAiBtB,IAC5BjB,GAVoB,IAWvBT,SAAUkB,GAAcC,EACxBE,SAAU,CACRF,GAAkC,UAArBM,IAAgDwB,EAAAA,EAAAA,KAC3DrG,EACA,CACE8E,UAAW,gCACXzB,MAAOsB,EACP5B,UAAW,QACXuD,QAASjI,EACToG,SAAUzD,IAGduD,EAAYI,IAA+B0B,EAAAA,EAAAA,KAAI5F,EAAAA,EAAAA,KAAa,CAAEF,QAAS,EAAGkE,UAA0B4B,EAAAA,EAAAA,KAAIrD,GAAD,UAAqBiD,OAAqCI,EAAAA,EAAAA,KAAIrD,GAAD,UAAqBiD,IACzL1B,GAAkC,QAArBM,IAA8CwB,EAAAA,EAAAA,KACzDrG,EACA,CACE8E,UAAW,8BACXzB,MAAOsB,EACP5B,UAAW,MACXuD,QAASjI,EACToG,SAAUzD,OAMrB,IAED,SAASgC,EAAcmB,GACnB,IAAMrF,EAA+CqF,EAA/CrF,SAAU4F,EAAqCP,EAArCO,UAAWD,EAA0BN,EAA1BM,SAAUpG,EAAgB8F,EAAhB9F,YACrC,OAAqBoE,EAAAA,EAAAA,MAAK5C,EAAAA,SAAU,CAAE4E,SAAU,CAChD3F,IAA4BuH,EAAAA,EAAAA,KAAIzG,EAAY,CAAE2G,UAAWlI,EAAaoG,SAAU3F,IAChF2F,EACAC,IAA6B2B,EAAAA,EAAAA,KAAIzG,EAAY,CAAE,YAAavB,EAAaoG,SAAUC,MAEtF,CARD5E,EAAO0G,YAAc,Q,8FEhGrB,SAASC,EAAU5G,EAAKV,GACtB,GAAW,MAAPU,EAEJ,GAAmB,oBAARA,EAIT,IACAA,EAAI6G,QAAUvH,CAGf,CAFC,MAAOwH,GACP,MAAM,IAAIC,MAAJ,+BAAkCzH,EAAlC,qBAAoDU,EAApD,KACP,MAPCA,EAAIV,EAQP,CACD,SAAS0H,IAAmB,2BAANC,EAAM,yBAANA,EAAM,gBACxB,OAAK,SAACjB,GACNiB,EAAKC,SAAQ,SAAClH,GACZ4G,EAAU5G,EAAKgG,EAChB,GACF,CACF,CACD,SAASE,IAAsB,2BAANe,EAAM,yBAANA,EAAM,gBAC3B,OAAKhD,EAAAA,EAAAA,UAAQ,kBAAM+C,EAAS,WAAT,EAAaC,EAAnB,GAA0BA,EAC1C,C","sources":["components/ContactForm/ContactForm.module.css","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","../node_modules/@chakra-ui/table/src/table.tsx","../node_modules/@chakra-ui/table/src/thead.tsx","../node_modules/@chakra-ui/table/src/tr.tsx","../node_modules/@chakra-ui/table/src/th.tsx","../node_modules/@chakra-ui/table/src/tbody.tsx","../node_modules/@chakra-ui/table/src/td.tsx","components/ContactList/ContactList.jsx","components/Filter/Filter.module.css","components/Filter/Filter.jsx","pages/Contacts.js","../node_modules/@chakra-ui/button/src/button-context.ts","../node_modules/@chakra-ui/button/src/button-icon.tsx","../node_modules/@chakra-ui/button/src/button-spinner.tsx","../node_modules/@chakra-ui/button/src/button.tsx","../node_modules/@chakra-ui/button/src/use-button-type.tsx","../node_modules/@chakra-ui/react-use-merge-refs/src/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter.filter;\n","import React from 'react';\nimport { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const items = useSelector(getContacts);\n\n  const handleChangeName = e => {\n    const { value } = e.target;\n    setName(value);\n  };\n\n  const handleChangeNumber = e => {\n    const { value } = e.target;\n    setNumber(value);\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const contactsLists = [...items];\n    if (contactsLists.findIndex(contact => name === contact.name) !== -1) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleFormSubmit}>\n      <label className={css.formLabel}>\n        Name\n        <input\n          className={css.formName}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={handleChangeName}\n        />\n      </label>\n      <label className={css.formLabel}>\n        Number\n        <input\n          className={css.formNumber}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"Enter phone number\"\n          value={number}\n          onChange={handleChangeNumber}\n        />\n      </label>\n      <button className={css.formBtn} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n};\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { createContext } from \"@chakra-ui/react-context\"\n\nconst [TableStylesProvider, useTableStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `TableStylesContext`,\n  errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Table />\" `,\n})\n\nexport { useTableStyles }\n\nexport interface TableOptions {\n  layout?: SystemStyleObject[\"tableLayout\"]\n}\n\nexport interface TableProps\n  extends HTMLChakraProps<\"table\">,\n    TableOptions,\n    ThemingProps<\"Table\"> {}\n\n/**\n * The `Table` component is used to organize and display data efficiently. It renders a `<table>` element by default.\n *\n * @see Docs https://chakra-ui.com/docs/components/table\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/table/\n */\nexport const Table = forwardRef<TableProps, \"table\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Table\", props)\n  const { className, layout, ...tableProps } = omitThemingProps(props)\n\n  return (\n    <TableStylesProvider value={styles}>\n      <chakra.table\n        ref={ref}\n        __css={{ tableLayout: layout, ...styles.table }}\n        className={cx(\"chakra-table\", className)}\n        {...tableProps}\n      />\n    </TableStylesProvider>\n  )\n})\n\nTable.displayName = \"Table\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableHeadProps extends HTMLChakraProps<\"thead\"> {}\n\nexport const Thead = forwardRef<TableHeadProps, \"thead\">((props, ref) => {\n  const styles = useTableStyles()\n  return <chakra.thead {...props} ref={ref} __css={styles.thead} />\n})\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableRowProps extends HTMLChakraProps<\"tr\"> {}\nexport const Tr = forwardRef<TableRowProps, \"tr\">((props, ref) => {\n  const styles = useTableStyles()\n\n  return <chakra.tr {...props} ref={ref} __css={styles.tr} />\n})\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableColumnHeaderProps extends HTMLChakraProps<\"th\"> {\n  /**\n   * Aligns the cell content to the right\n   * @default false\n   */\n  isNumeric?: boolean\n}\nexport const Th = forwardRef<TableColumnHeaderProps, \"th\">(\n  ({ isNumeric, ...rest }, ref) => {\n    const styles = useTableStyles()\n    return (\n      <chakra.th\n        {...rest}\n        ref={ref}\n        __css={styles.th}\n        data-is-numeric={isNumeric}\n      />\n    )\n  },\n)\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableBodyProps extends HTMLChakraProps<\"tbody\"> {}\n\nexport const Tbody = forwardRef<TableBodyProps, \"tbody\">((props, ref) => {\n  const styles = useTableStyles()\n  return <chakra.tbody {...props} ref={ref} __css={styles.tbody} />\n})\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableCellProps extends HTMLChakraProps<\"td\"> {\n  /**\n   * Aligns the cell content to the right\n   * @default false\n   */\n  isNumeric?: boolean\n}\nexport const Td = forwardRef<TableCellProps, \"td\">(\n  ({ isNumeric, ...rest }, ref) => {\n    const styles = useTableStyles()\n\n    return (\n      <chakra.td\n        {...rest}\n        ref={ref}\n        __css={styles.td}\n        data-is-numeric={isNumeric}\n      />\n    )\n  },\n)\n","import { useDispatch, useSelector } from 'react-redux';\nimport { delContact } from 'redux/contacts/operations';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\n// import css from './ContactList.module.css';\nimport { Button, Table, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\n\nconst getVisibleContacts = (contacts, filter) => {\n  if (!filter) {\n    return contacts;\n  } else {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n  }\n};\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const visibleContacts = getVisibleContacts(contacts, filter);\n\n  const dispatch = useDispatch();\n  const handleDelete = id => dispatch(delContact(id));\n\n  return (\n    <Table variant=\"simple\" maxWidth='600'>\n      <Thead>\n        <Tr>\n          <Th>Name</Th>\n          <Th>Number</Th>\n          <Th></Th>\n        </Tr>\n      </Thead>\n      <Tbody>\n        {visibleContacts.map((contact, id) => (\n          <Tr key={id}>\n            <Td>{contact.name}</Td>\n            <Td>{contact.number} </Td>\n            <Td>\n              {' '}\n              {/* <button\n                type=\"button\"\n                className={css.contactListItemBtn}\n                onClick={() => handleDelete(contact.id)}\n              >\n                Delete\n              </button> */}\n              <Button\n                colorScheme=\"teal\"\n                variant=\"outline\"\n                type=\"button\"\n                onClick={() => handleDelete(contact.id)}\n              >\n                Delete\n              </Button>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n// <div className={css.wraperContactList}>\n//   <ul className={css.contactList}>\n//     {visibleContacts.map((contact, id) => (\n//       <li key={id} className={css.contactListItem}>\n//         {contact.name}: {contact.number}\n// <button\n//   type=\"button\"\n//   className={css.contactListItemBtn}\n//   onClick={() => handleDelete(contact.id)}\n// >\n//   Delete\n// </button>\n//       </li>\n//     ))}\n//   </ul>\n// </div>\n","// extracted by mini-css-extract-plugin\nexport default {};","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div>\n      <label className={css.filterLabel}>Find contacts by Name </label>\n      <input\n        className={css.filterName}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter filter\"\n        value={filter}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {/* <HelmetProvider>\n        <Helmet> */}\n          <title>Phonebook</title>\n        {/* </Helmet> */}\n        <ContactForm />\n        <div>{isLoading && 'Request in progress...'}</div>\n        <Filter />\n        <ContactList />\n      {/* </HelmetProvider> */}\n    </>\n  );\n}\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n","import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getFilter","filter","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","className","css","onSubmit","e","preventDefault","findIndex","contact","alert","addContact","type","pattern","title","required","placeholder","value","onChange","target","createContext","errorMessage","TableStylesProvider","useTableStyles","Table","props","forwardRef","ref","styles","useMultiStyleConfig","omitThemingProps","layout","tableProps","children","table","chakra","tableLayout","displayName","__css","cx","Thead","thead","Tr","tr","isNumeric","Th","rest","th","Tbody","tbody","Td","td","ContactList","visibleContacts","toLowerCase","includes","getVisibleContacts","variant","maxWidth","map","id","colorScheme","onClick","delContact","handleDelete","Filter","setFilter","Contacts","useEffect","fetchContacts","strict","useButtonGroup","_children","focusable","isValidElement","cloneElement","_className","span","ButtonIcon","alignSelf","flexShrink","label","placement","spacing","color","ButtonSpinner","Spinner","width","height","marginProp","spinnerStyles","display","useMemo","alignItems","position","div","dataAttr","isDisabled","isActive","Fragment","leftIcon","rightIcon","loadingText","iconSpacing","spinner","spinnerPlacement","as","buttonStyles","_focus","zIndex","appearance","justifyContent","userSelect","whiteSpace","verticalAlign","outline","useButtonType","_ref","defaultType","contentProps","isButton","setIsButton","useCallback","node","tagName","useMergeRefs","button","disabled","useStyleConfig","Button","jsx","group","opacity","marginStart","marginEnd","assignRef","current","error","Error","mergeRefs","refs","forEach"],"sourceRoot":""}