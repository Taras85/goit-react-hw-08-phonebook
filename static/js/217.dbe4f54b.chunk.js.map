{"version":3,"file":"static/js/217.dbe4f54b.chunk.js","mappings":"sOACA,GAAgB,KAAO,0BAA0B,UAAY,+BAA+B,WAAa,gCAAgC,SAAW,+B,UCDvIA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EAEnBC,EAAe,SAAAH,GAAK,OAAIA,EAAMC,SAASG,SAAnB,EAIpBC,EAAY,SAAAL,GAAK,OAAIA,EAAMM,OAAOA,MAAjB,E,6BCEjBC,EAAc,WACzB,OAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACMC,GAAWC,EAAAA,EAAAA,MACXZ,GAAQa,EAAAA,EAAAA,IAAYhB,GAwB1B,OACE,kBAAMiB,UAAWC,EAAAA,KAAUC,SAbJ,SAAAC,GACvBA,EAAEC,kBAEiE,KADhD,OAAOlB,GACRmB,WAAU,SAAAC,GAAO,OAAIb,IAASa,EAAQb,IAArB,IACjCc,MAAM,GAAD,OAAId,EAAJ,6BAELI,GAASW,EAAAA,EAAAA,IAAW,CAAEf,KAAAA,EAAME,OAAAA,KAE9BD,EAAQ,IACRE,EAAU,GACX,EAGC,WACE,mBAAOI,UAAWC,EAAAA,UAAlB,UAAiC,QAE/B,SAAC,EAAAQ,EAAD,CACcC,QAAQ,UAClBC,iBAAiB,WAEnBX,UAAWC,EAAAA,SACXW,KAAK,OACLnB,KAAK,OACLoB,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRC,YAAY,aACZC,MAAOxB,EACPyB,SAtCiB,SAAAf,GACvB,IAAQc,EAAUd,EAAEgB,OAAZF,MACRvB,EAAQuB,EACT,QAsCG,mBAAOjB,UAAWC,EAAAA,UAAlB,UAAiC,UAE/B,SAAC,EAAAQ,EAAD,CACwBC,QAAQ,UAC5BC,iBAAiB,WACnBX,UAAWC,EAAAA,WACXW,KAAK,MACLnB,KAAK,SACLoB,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,EACRC,YAAY,qBACZC,MAAOtB,EACPuB,SAjDmB,SAAAf,GACzB,IAAQc,EAAUd,EAAEgB,OAAZF,MACRrB,EAAUqB,EACX,QAiDG,SAAC,IAAD,CAAgBG,YAAY,OAC1BV,QAAQ,UAAUV,UAAWC,EAAAA,QAAaW,KAAK,SADjD,SAC0D,kBAK/D,E,yGCjED,GAA4CS,EAAAA,EAAAA,GAAc,CACxDC,KAAI,qBACJC,aAAY,sGAFd,eAAKC,EAAL,KAA0BC,EAA1B,KAIIC,GAAQC,EAAAA,EAAAA,IAAW,SAACC,EAAOC,GAC7B,IAAM7B,GAAS8B,EAAAA,EAAAA,IAAoB,QAASF,GAC5C,GAA6CG,EAAAA,EAAAA,IAAiBH,GAAtDI,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,OAAWhB,GAA9B,YACA,OAAuBxB,EAAAA,EAAAA,KAAI+B,EAAqB,CAAEU,MAAOlC,EAAQmC,UAA0B1C,EAAAA,EAAAA,KACzF2C,EAAAA,EAAAA,OAD4F,QAG1FP,IAAAA,EACAQ,OAAK,QAAIC,YAAaL,GAAWjC,EAAOuC,OACxCP,WAAWQ,EAAAA,EAAAA,IAAG,eAAgBR,IAC3Bf,KAGR,IACDS,EAAM,YAAc,QCrBpB,IAAIE,GAAQa,EAAAA,EAAAA,IAAW,SAACZ,EAAOL,GAC7B,IAAMkB,EAASN,IACf,OAAuBV,EAAAA,EAAAA,KAAIC,EAAAA,EAAAA,OAAD,kBAAoBE,GAApB,IAA2BL,IAAAA,EAAK,MAAOkB,EAAOH,QACzE,ICHGX,GAAKe,EAAAA,EAAAA,IAAW,SAACd,EAAOL,GAC1B,IAAMoB,EAASR,IACf,OAAuBV,EAAAA,EAAAA,KAAIC,EAAAA,EAAAA,IAAD,kBAAiBE,GAAjB,IAAwBL,IAAAA,EAAK,MAAOoB,EAAOL,KACtE,I,gBCHGM,GAAKC,EAAAA,EAAAA,IACP,WAAyBC,GAAQ,IAA9BlB,EAA8B,EAA9BA,UAAcL,GAAgB,YACzBwB,EAASZ,IACf,OAAuBR,EAAAA,EAAAA,KACrBD,EAAAA,EAAAA,IADwB,kBAGnBH,GAHmB,IAItBuB,IAAAA,EACA,MAAOC,EAAOT,GACd,kBAAmBV,IAGxB,ICZCD,GAAQqB,EAAAA,EAAAA,IAAW,SAACpB,EAAOL,GAC7B,IAAM0B,EAASd,IACf,OAAuBV,EAAAA,EAAAA,KAAIC,EAAAA,EAAAA,OAAD,kBAAoBE,GAApB,IAA2BL,IAAAA,EAAK,MAAO0B,EAAOX,QACzE,I,gBCHGM,GAAKM,EAAAA,EAAAA,IACP,WAAyBJ,GAAQ,IAA9BlB,EAA8B,EAA9BA,UAAcL,GAAgB,YACzB4B,EAAShB,IACf,OAAuBR,EAAAA,EAAAA,KACrBD,EAAAA,EAAAA,IADwB,kBAGnBH,GAHmB,IAItBuB,IAAAA,EACA,MAAOK,EAAOb,GACd,kBAAmBV,IAGxB,ICJUwB,EAAc,WACzB,IAEMC,EAbmB,SAACrE,EAAUK,GACpC,OAAKA,EAGIL,EAASK,QAAO,SAAAgB,GACrB,OAAOA,EAAQb,KAAK8D,cAAcC,SAASlE,EAAOiE,cACnD,IAJMtE,CAMV,CAKyBwE,EAFP1D,EAAAA,EAAAA,IAAYhB,IACdgB,EAAAA,EAAAA,IAAYV,IAGrBQ,GAAWC,EAAAA,EAAAA,MAGjB,OACE,UAAC2B,EAAD,CAAQiC,YAAY,MAAMC,YAAY,WAAtC,WACE,SAAClB,EAAD,WACE,UAACE,EAAD,YACE,SAACG,EAAD,CAAIc,MAAM,WAAV,SAAqB,UACrB,SAACd,EAAD,CAAIc,MAAM,WAAV,SAAqB,YACrB,SAACd,EAAD,UAGJ,SAACG,EAAD,UACGK,EAAgBO,KAAI,SAACvD,EAASwD,GAAV,OACnB,UAACnB,EAAD,YACE,SAACQ,EAAD,UAAM7C,EAAQb,QACd,UAAC0D,EAAD,WAAK7C,EAAQX,OAAO,QACpB,SAACwD,EAAD,WAGE,SAAC,IAAD,CACE/B,YAAY,OACZV,QAAQ,UACRE,KAAK,SACLmD,QAAS,kBAvBF,SAAAD,GAAE,OAAIjE,GAASmE,EAAAA,EAAAA,IAAWF,GAAxB,CAuBMG,CAAa3D,EAAQwD,GAA3B,EAJX,SAKC,eAXIA,EADU,QAqB5B,ECtDD,EAA6B,2BAA7B,EAAsE,4B,UCKzDI,EAAS,WACpB,IAAMrE,GAAWC,EAAAA,EAAAA,MACXR,GAASS,EAAAA,EAAAA,IAAYV,GAM3B,OACE,0BACE,mBAAOW,UAAWC,EAAlB,UAAmC,yBACnC,SAAC,EAAAQ,EAAD,CACkCC,QAAQ,UACpCC,iBAAiB,WACrBX,UAAWC,EACXW,KAAK,OACLnB,KAAK,SACLuB,YAAY,eACZC,MAAO3B,EACP4B,SAfe,SAAAf,GACnBN,GAASsE,EAAAA,EAAAA,GAAUhE,EAAEgB,OAAOF,OAC7B,QAkBF,ECrBc,SAASmD,IACtB,IAAMvE,GAAWC,EAAAA,EAAAA,MACXV,GAAYW,EAAAA,EAAAA,IAAYZ,GAM9B,OAJAkF,EAAAA,EAAAA,YAAU,WACRxE,GAASyE,EAAAA,EAAAA,MACV,GAAE,CAACzE,KAGF,iCAGM,2BAAO,eAET,SAACN,EAAD,KACA,yBAAMH,GAAa,4BACnB,SAAC8E,EAAD,KACA,SAACb,EAAD,MAIP,C,6QChBD,GAAwDhC,EAAAA,EAAAA,GAAc,CACpEC,KAAI,2BACJiD,aAAY,kHAFd,eAAKC,EAAL,KAAgCC,EAAhC,KAIA,GAAmDpD,EAAAA,EAAAA,GAAc,CAC/DqD,QAAQ,EACRpD,KAAM,uBAFR,eAAKqD,EAAL,KAA0BC,EAA1B,KAkHA,IAAIC,GAAclD,EAAAA,EAAAA,IAChB,SAAsBmD,EAAOC,GAC3B,IAAMC,GAASlD,EAAAA,EAAAA,IAAoB,OAAQgD,GAE3C,EAlHJ,SAAgCA,GAC9B,IACMhB,EAMFgB,EANFG,GACAC,EAKEJ,EALFI,WACAC,EAIEL,EAJFK,UACAC,EAGEN,EAHFM,WACAC,EAEEP,EAFFO,WACGC,GANL,OAOIR,EAPJ,GAQMS,GAAOC,EAAAA,EAAAA,SACPP,EAAKnB,GAAM,gBAAayB,GACxBE,EAAO,UAAMR,EAAN,UACPS,EAAU,UAAMT,EAAN,aACVU,EAAU,UAAMV,EAAN,aAChB,GAA8CzF,EAAAA,EAAAA,WAAS,GAAvD,eAAOoG,EAAP,KAAwBC,EAAxB,KACA,GAAsCrG,EAAAA,EAAAA,WAAS,GAA/C,eAAOsG,EAAP,KAAoBC,EAApB,KACA,GAA8BvG,EAAAA,EAAAA,WAAS,GAAvC,eAAOwG,EAAP,KAAkBC,EAAlB,KACMC,GAAmBC,EAAAA,EAAAA,cACvB,eAACvE,EAAD,uDAAU,GAAIwE,EAAd,uDAA6B,KAA7B,uBACEnB,GAAIU,GACD/D,GAFL,IAOEmD,KAAKsB,EAAAA,EAAAA,IAAUD,GAAc,SAACE,GACvBA,GAELP,GAAe,EAChB,KAXH,GAaA,CAACJ,IAEGY,GAAgBJ,EAAAA,EAAAA,cACpB,eAACvE,EAAD,uDAAU,GAAIwE,EAAd,uDAA6B,KAA7B,yBACKxE,GADL,IAEEmD,IAAKqB,EACL,cAAcI,EAAAA,EAAAA,IAASR,GACvB,iBAAiBQ,EAAAA,EAAAA,IAASpB,GAC1B,gBAAgBoB,EAAAA,EAAAA,IAASrB,GACzB,iBAAiBqB,EAAAA,EAAAA,IAASnB,GAC1BJ,QAAkB,IAAdrD,EAAOqD,GAAgBrD,EAAOqD,GAAKQ,EACvCgB,aAA4B,IAAnB7E,EAAO6E,QAAqB7E,EAAO6E,QAAUxB,GARxD,GAUA,CAACA,EAAIG,EAAYY,EAAWb,EAAWE,EAAYI,IAE/CiB,GAAuBP,EAAAA,EAAAA,cAC3B,eAACvE,EAAD,uDAAU,GAAIwE,EAAd,uDAA6B,KAA7B,uBACEnB,GAAIS,GACD9D,GAFL,IAOEmD,KAAKsB,EAAAA,EAAAA,IAAUD,GAAc,SAACE,GACvBA,GAELT,GAAmB,EACpB,IACD,YAAa,UAZf,GAcA,CAACH,IAEGiB,GAAeR,EAAAA,EAAAA,cACnB,eAACvE,EAAD,uDAAU,GAAIwE,EAAd,uDAA6B,KAA7B,iCACKxE,GACA0D,GAFL,IAGEP,IAAKqB,EACLlE,KAAM,QACN,cAAcsE,EAAAA,EAAAA,IAASR,GACvB,iBAAiBQ,EAAAA,EAAAA,IAASpB,GAC1B,gBAAgBoB,EAAAA,EAAAA,IAASrB,GACzB,iBAAiBqB,EAAAA,EAAAA,IAASnB,IAR5B,GAUA,CAACC,EAAWF,EAAYY,EAAWb,EAAWE,IAE1CuB,GAA4BT,EAAAA,EAAAA,cAChC,eAACvE,EAAD,uDAAU,GAAIwE,EAAd,uDAA6B,KAA7B,yBACKxE,GADL,IAEEmD,IAAKqB,EACLlE,KAAM,eACN,eAAe,EACf2E,SAAUjF,EAAOiF,UAAY,KAL/B,GAOA,IAEF,MAAO,CACL3B,aAAcA,EACdC,YAAaA,EACbE,aAAcA,EACdD,aAAcA,EACdY,YAAaA,EACbc,QAAS,kBAAMb,GAAS,EAAf,EACTpE,OAAQ,kBAAMoE,GAAS,EAAf,EACRL,gBAAAA,EACAC,mBAAAA,EACAC,YAAAA,EACAC,eAAAA,EACAd,GAAAA,EACAQ,QAAAA,EACAC,WAAAA,EACAC,WAAAA,EACAL,UAAAA,EACAY,iBAAAA,EACAQ,qBAAAA,EACAC,aAAAA,EACAJ,cAAAA,EACAK,0BAAAA,EAEH,CASOlF,EALaK,EAAAA,EAAAA,IAAiB+C,IAEhC6B,EADF,EACEA,aAEGI,GAHL,EAEEzB,WAFF,aAKM/C,GAAYC,EAAAA,EAAAA,IAAG,sBAAuBsC,EAAMvC,WAChD,OAAqB9C,EAAAA,EAAAA,KAAIkF,EAAqB,CAAErC,MAAOyE,EAASF,UAA0BpH,EAAAA,EAAAA,KAAI+E,EAA2B,CAAElC,MAAO0C,EAAQ6B,UAA0BpH,EAAAA,EAAAA,KACpK2C,EAAAA,EAAAA,KADuK,kBAGlKuE,EAAa,GAAI5B,IAHiJ,IAIrKxC,UAAAA,EACAyE,MAAOhC,EAAM,gBAGlB,IAEHH,EAAYoC,YAAc,eACLtF,EAAAA,EAAAA,IACnB,SAAyBmD,EAAOC,GAC5B,IAAI,EAAQH,IACRI,EAASP,IACTlC,GAAYC,EAAAA,EAAAA,IAAG,2BAA4BsC,EAAMvC,WACrD,OAAqB9C,EAAAA,EAAAA,KACrB2C,EAAAA,EAAAA,KADwB,kBAGV,MAAT,OAAgB,EAAS,EAAM8D,iBAAiBpB,EAAOC,IAHpC,IAItBiC,MAAOhC,EAAO,WACdzC,UAAAA,IAGL,IAEY0E,YAAc,iB,2KCjK7B,SAASvF,EAAewF,GACtB,MAWF,SAA6BA,GAC3B,IAAIvC,EAAIb,EAAI8C,EACNC,EAAQM,IAEZC,EAWEF,EAXFE,GACAC,EAUEH,EAVFG,SACAtG,EASEmG,EATFnG,SACAiG,EAQEE,EARFF,SACAjE,EAOEmE,EAPFnE,WACAqC,EAME8B,EANF9B,UACAH,EAKEiC,EALFjC,WACAC,EAIEgC,EAJFhC,WACAS,EAGEuB,EAHFvB,QACA2B,EAEEJ,EAFFI,OACGC,GAXL,OAYIL,EAZJ,GAaMzB,EAAWyB,EAAM,oBAAsB,CAACA,EAAM,qBAAuB,IAC7D,MAATL,OAAgB,EAASA,EAAMhB,mBAA8B,MAATgB,OAAgB,EAASA,EAAMzB,YACtFK,EAASC,KAAKmB,EAAMW,aAET,MAATX,OAAgB,EAASA,EAAMY,cACjChC,EAASC,KAAKmB,EAAMa,YAEtB,yBACKH,GADL,IAEE,mBAAoB9B,EAASkC,KAAK,WAAQ,EAC1CP,GAAU,MAANA,EAAaA,EAAc,MAATP,OAAgB,EAASA,EAAMO,GACrDlC,WAA+D,OAAlDP,EAAiB,MAAZ0C,EAAmBA,EAAWnC,GAAsBP,EAAc,MAATkC,OAAgB,EAASA,EAAM3B,WAC1GD,WAA+D,OAAlDnB,EAAiB,MAAZ/C,EAAmBA,EAAWkE,GAAsBnB,EAAc,MAAT+C,OAAgB,EAASA,EAAM5B,WAC1GlC,WAA+D,OAAlD6D,EAAiB,MAAZI,EAAmBA,EAAWjE,GAAsB6D,EAAc,MAATC,OAAgB,EAASA,EAAM9D,WAC1GqC,UAAwB,MAAbA,EAAoBA,EAAqB,MAATyB,OAAgB,EAASA,EAAMzB,UAC1EO,SAASiC,EAAAA,EAAAA,IAAyB,MAATf,OAAgB,EAASA,EAAMlB,QAASA,GACjE2B,QAAQM,EAAAA,EAAAA,IAAyB,MAATf,OAAgB,EAASA,EAAMS,OAAQA,IAElE,CA7CoEnC,CAAoB+B,GAA/EhC,EAAR,EAAQA,WAAYE,EAApB,EAAoBA,UAAWH,EAA/B,EAA+BA,WAAYlC,EAA3C,EAA2CA,WAAewE,GAA1D,YACA,yBACKA,GADL,IAEEF,SAAUnC,EACVnE,SAAUkE,EACV+B,SAAUjE,EACV,gBAAgB8E,EAAAA,EAAAA,IAASzC,GACzB,iBAAiByC,EAAAA,EAAAA,IAAS9E,GAC1B,iBAAiB8E,EAAAA,EAAAA,IAAS5C,IAE7B,C,mBCNGvD,GAAQC,EAAAA,EAAAA,IAAW,SAAgBmG,EAAO/E,GAC5C,IAAQlB,EAAsBiG,EAAtBjG,SAAagD,GAArB,OAA8BiD,EAA9B,GACMC,GAASjG,EAAAA,EAAAA,IAAoB,QAAS+C,GAEtC7E,EAAQ4H,GADG7F,EAAAA,EAAAA,IAAiB8C,IAE5BmD,GAAaxF,EAAAA,EAAAA,IAAG,eAAgBsF,EAAMvF,WAC5C,OAAuB0F,EAAAA,EAAAA,KACrB7F,EAAAA,EAAAA,OADwB,gBAGtB4E,KAAMnF,GACH7B,GAJmB,IAKtBsC,MAAOyF,EAAOjE,MACdf,IAAAA,EACAR,UAAWyF,IAGhB,IACDtG,EAAM,YAAc,QACpBA,EAAM,GAAK,O","sources":["webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","../node_modules/@chakra-ui/table/src/table.tsx","../node_modules/@chakra-ui/table/src/thead.tsx","../node_modules/@chakra-ui/table/src/tr.tsx","../node_modules/@chakra-ui/table/src/th.tsx","../node_modules/@chakra-ui/table/src/tbody.tsx","../node_modules/@chakra-ui/table/src/td.tsx","components/ContactList/ContactList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","pages/Contacts.js","../node_modules/@chakra-ui/form-control/src/form-control.tsx","../node_modules/@chakra-ui/form-control/src/use-form-control.ts","../node_modules/@chakra-ui/input/src/input.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"formLabel\":\"ContactForm_formLabel__TSwxK\",\"formNumber\":\"ContactForm_formNumber__UMrmC\",\"formName\":\"ContactForm_formName__9bHzl\"};","export const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter.filter;\n","import React from 'react';\nimport { useState } from 'react';\nimport css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/contacts/selectors';\nimport { Button, Input } from '@chakra-ui/react';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const items = useSelector(getContacts);\n\n  const handleChangeName = e => {\n    const { value } = e.target;\n    setName(value);\n  };\n\n  const handleChangeNumber = e => {\n    const { value } = e.target;\n    setNumber(value);\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n    const contactsLists = [...items];\n    if (contactsLists.findIndex(contact => name === contact.name) !== -1) {\n      alert(`${name} is already in contacts.`);\n    } else {\n      dispatch(addContact({ name, number }));\n    }\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={css.form} onSubmit={handleFormSubmit}>\n      <label className={css.formLabel}>\n        Name\n        <Input\n                      variant=\"outline\"\n            focusBorderColor=\"teal.300\"\n\n          className={css.formName}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          placeholder=\"Enter name\"\n          value={name}\n          onChange={handleChangeName}\n        />\n      </label>\n      <label className={css.formLabel}>\n        Number\n        <Input\n                                variant=\"outline\"\n            focusBorderColor=\"teal.300\"\n          className={css.formNumber}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          placeholder=\"Enter phone number\"\n          value={number}\n          onChange={handleChangeNumber}\n        />\n      </label>\n      <Button         colorScheme=\"teal\"\n        variant=\"outline\" className={css.formBtn} type=\"submit\">\n        Add contact\n      </Button>\n    </form>\n  );\n};\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { createContext } from \"@chakra-ui/react-context\"\n\nconst [TableStylesProvider, useTableStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `TableStylesContext`,\n  errorMessage: `useTableStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<Table />\" `,\n})\n\nexport { useTableStyles }\n\nexport interface TableOptions {\n  layout?: SystemStyleObject[\"tableLayout\"]\n}\n\nexport interface TableProps\n  extends HTMLChakraProps<\"table\">,\n    TableOptions,\n    ThemingProps<\"Table\"> {}\n\n/**\n * The `Table` component is used to organize and display data efficiently. It renders a `<table>` element by default.\n *\n * @see Docs https://chakra-ui.com/docs/components/table\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/table/\n */\nexport const Table = forwardRef<TableProps, \"table\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Table\", props)\n  const { className, layout, ...tableProps } = omitThemingProps(props)\n\n  return (\n    <TableStylesProvider value={styles}>\n      <chakra.table\n        ref={ref}\n        __css={{ tableLayout: layout, ...styles.table }}\n        className={cx(\"chakra-table\", className)}\n        {...tableProps}\n      />\n    </TableStylesProvider>\n  )\n})\n\nTable.displayName = \"Table\"\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableHeadProps extends HTMLChakraProps<\"thead\"> {}\n\nexport const Thead = forwardRef<TableHeadProps, \"thead\">((props, ref) => {\n  const styles = useTableStyles()\n  return <chakra.thead {...props} ref={ref} __css={styles.thead} />\n})\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableRowProps extends HTMLChakraProps<\"tr\"> {}\nexport const Tr = forwardRef<TableRowProps, \"tr\">((props, ref) => {\n  const styles = useTableStyles()\n\n  return <chakra.tr {...props} ref={ref} __css={styles.tr} />\n})\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableColumnHeaderProps extends HTMLChakraProps<\"th\"> {\n  /**\n   * Aligns the cell content to the right\n   * @default false\n   */\n  isNumeric?: boolean\n}\nexport const Th = forwardRef<TableColumnHeaderProps, \"th\">(\n  ({ isNumeric, ...rest }, ref) => {\n    const styles = useTableStyles()\n    return (\n      <chakra.th\n        {...rest}\n        ref={ref}\n        __css={styles.th}\n        data-is-numeric={isNumeric}\n      />\n    )\n  },\n)\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableBodyProps extends HTMLChakraProps<\"tbody\"> {}\n\nexport const Tbody = forwardRef<TableBodyProps, \"tbody\">((props, ref) => {\n  const styles = useTableStyles()\n  return <chakra.tbody {...props} ref={ref} __css={styles.tbody} />\n})\n","import { chakra, forwardRef, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useTableStyles } from \"./table\"\n\nexport interface TableCellProps extends HTMLChakraProps<\"td\"> {\n  /**\n   * Aligns the cell content to the right\n   * @default false\n   */\n  isNumeric?: boolean\n}\nexport const Td = forwardRef<TableCellProps, \"td\">(\n  ({ isNumeric, ...rest }, ref) => {\n    const styles = useTableStyles()\n\n    return (\n      <chakra.td\n        {...rest}\n        ref={ref}\n        __css={styles.td}\n        data-is-numeric={isNumeric}\n      />\n    )\n  },\n)\n","import { useDispatch, useSelector } from 'react-redux';\nimport { delContact } from 'redux/contacts/operations';\nimport { getContacts, getFilter } from 'redux/contacts/selectors';\n// import css from './ContactList.module.css';\nimport { Button, Table, Tbody, Td, Th, Thead, Tr } from '@chakra-ui/react';\n\nconst getVisibleContacts = (contacts, filter) => {\n  if (!filter) {\n    return contacts;\n  } else {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n  }\n};\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const visibleContacts = getVisibleContacts(contacts, filter);\n\n  const dispatch = useDispatch();\n  const handleDelete = id => dispatch(delContact(id));\n\n  return (\n    <Table  borderWidth=\"1px\" borderColor=\"gray.200\" >\n      <Thead >\n        <Tr >\n          <Th color=\"teal.500\">Name</Th>\n          <Th color=\"teal.500\">Number</Th>\n          <Th></Th>\n        </Tr>\n      </Thead>\n      <Tbody >\n        {visibleContacts.map((contact, id) => (\n          <Tr key={id} >\n            <Td >{contact.name}</Td>\n            <Td>{contact.number} </Td>\n            <Td>\n\n \n              <Button\n                colorScheme=\"teal\"\n                variant=\"outline\"\n                type=\"button\"\n                onClick={() => handleDelete(contact.id)}\n              >\n                Delete\n              </Button>\n            </Td>\n          </Tr>\n        ))}\n      </Tbody>\n    </Table>\n  );\n};\n\n// <div className={css.wraperContactList}>\n//   <ul className={css.contactList}>\n//     {visibleContacts.map((contact, id) => (\n//       <li key={id} className={css.contactListItem}>\n//         {contact.name}: {contact.number}\n// <button\n//   type=\"button\"\n//   className={css.contactListItemBtn}\n//   onClick={() => handleDelete(contact.id)}\n// >\n//   Delete\n// </button>\n//       </li>\n//     ))}\n//   </ul>\n// </div>\n","// extracted by mini-css-extract-plugin\nexport default {\"filterName\":\"Filter_filterName__Y2kKA\",\"filterLabel\":\"Filter_filterLabel__+pnW-\"};","import css from './Filter.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter } from 'redux/contacts/selectors';\nimport { setFilter } from 'redux/contacts/filterSlice';\nimport { Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(getFilter);\n\n  const handleChange = e => {\n    dispatch(setFilter(e.target.value));\n  };\n\n  return (\n    <div>\n      <label className={css.filterLabel}>Find contacts by Name \n      <Input\n                                        variant=\"outline\"\n            focusBorderColor=\"teal.500\"\n        className={css.filterName}\n        type=\"text\"\n        name=\"filter\"\n        placeholder=\"Enter filter\"\n        value={filter}\n        onChange={handleChange}\n        />\n        </label>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n// import { Helmet, HelmetProvider } from 'react-helmet-async';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { getIsLoading } from 'redux/contacts/selectors';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      {/* <HelmetProvider>\n        <Helmet> */}\n          <title>Phonebook</title>\n        {/* </Helmet> */}\n        <ContactForm />\n        <div>{isLoading && 'Request in progress...'}</div>\n        <Filter />\n        <ContactList />\n      {/* </HelmetProvider> */}\n    </>\n  );\n}\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { PropGetter } from \"@chakra-ui/react-types\"\nimport { mergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { useCallback, useId, useState } from \"react\"\n\nconst [FormControlStylesProvider, useFormControlStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `FormControlStylesContext`,\n  errorMessage: `useFormControlStyles returned is 'undefined'. Seems you forgot to wrap the components in \"<FormControl />\" `,\n})\n\nexport { useFormControlContext, useFormControlStyles }\n\nexport interface FormControlOptions {\n  /**\n   * If `true`, the form control will be required. This has 2 side effects:\n   * - The `FormLabel` will show a required indicator\n   * - The form element (e.g, Input) will have `aria-required` set to `true`\n   *\n   * @default false\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the form control will be disabled. This has 2 side effects:\n   * - The `FormLabel` will have `data-disabled` attribute\n   * - The form element (e.g, Input) will be disabled\n   *\n   * @default false\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the form control will be invalid. This has 2 side effects:\n   * - The `FormLabel` and `FormErrorIcon` will have `data-invalid` set to `true`\n   * - The form element (e.g, Input) will have `aria-invalid` set to `true`\n   *\n   * @default false\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the form control will be readonly\n   *\n   * @default false\n   */\n  isReadOnly?: boolean\n}\n\ninterface FormControlContext extends FormControlOptions {\n  /**\n   * The label text used to inform users as to what information is\n   * requested for a text field.\n   */\n  label?: string\n  /**\n   * The custom `id` to use for the form control. This is passed directly to the form element (e.g, Input).\n   * - The form element (e.g. Input) gets the `id`\n   * - The form label id: `form-label-${id}`\n   * - The form error text id: `form-error-text-${id}`\n   * - The form helper text id: `form-helper-text-${id}`\n   */\n  id?: string\n}\n\ntype FormControlProviderContext = Omit<\n  ReturnType<typeof useFormControlProvider>,\n  \"getRootProps\" | \"htmlProps\"\n>\n\nconst [FormControlProvider, useFormControlContext] =\n  createContext<FormControlProviderContext>({\n    strict: false,\n    name: \"FormControlContext\",\n  })\n\nfunction useFormControlProvider(props: FormControlContext) {\n  const {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isReadOnly,\n    ...htmlProps\n  } = props\n\n  // Generate all the required ids\n  const uuid = useId()\n  const id = idProp || `field-${uuid}`\n\n  const labelId = `${id}-label`\n  const feedbackId = `${id}-feedback`\n  const helpTextId = `${id}-helptext`\n\n  /**\n   * Track whether the `FormErrorMessage` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasFeedbackText, setHasFeedbackText] = useState(false)\n\n  /**\n   * Track whether the `FormHelperText` has been rendered.\n   * We use this to append its id the `aria-describedby` of the `input`.\n   */\n  const [hasHelpText, setHasHelpText] = useState(false)\n\n  // Track whether the form element (e.g, `input`) has focus.\n  const [isFocused, setFocus] = useState(false)\n\n  const getHelpTextProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: helpTextId,\n      ...props,\n      /**\n       * Notify the field context when the help text is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasHelpText(true)\n      }),\n    }),\n    [helpTextId],\n  )\n\n  const getLabelProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      id: props.id !== undefined ? props.id : labelId,\n      htmlFor: props.htmlFor !== undefined ? props.htmlFor : id,\n    }),\n    [id, isDisabled, isFocused, isInvalid, isReadOnly, labelId],\n  )\n\n  const getErrorMessageProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      id: feedbackId,\n      ...props,\n      /**\n       * Notify the field context when the error message is rendered on screen,\n       * so we can apply the correct `aria-describedby` to the field (e.g. input, textarea).\n       */\n      ref: mergeRefs(forwardedRef, (node) => {\n        if (!node) return\n        setHasFeedbackText(true)\n      }),\n      \"aria-live\": \"polite\",\n    }),\n    [feedbackId],\n  )\n\n  const getRootProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ...htmlProps,\n      ref: forwardedRef,\n      role: \"group\",\n      \"data-focus\": dataAttr(isFocused),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n    }),\n    [htmlProps, isDisabled, isFocused, isInvalid, isReadOnly],\n  )\n\n  const getRequiredIndicatorProps = useCallback<PropGetter>(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      role: \"presentation\",\n      \"aria-hidden\": true,\n      children: props.children || \"*\",\n    }),\n    [],\n  )\n\n  return {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: () => setFocus(true),\n    onBlur: () => setFocus(false),\n    hasFeedbackText,\n    setHasFeedbackText,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps,\n    getHelpTextProps,\n    getErrorMessageProps,\n    getRootProps,\n    getLabelProps,\n    getRequiredIndicatorProps,\n  }\n}\n\nexport interface FormControlProps\n  extends HTMLChakraProps<\"div\">,\n    ThemingProps<\"FormControl\">,\n    FormControlContext {}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n *\n * @see Docs https://chakra-ui.com/docs/components/form-control\n */\nexport const FormControl = forwardRef<FormControlProps, \"div\">(\n  function FormControl(props, ref) {\n    const styles = useMultiStyleConfig(\"Form\", props)\n    const ownProps = omitThemingProps(props)\n    const {\n      getRootProps,\n      htmlProps: _,\n      ...context\n    } = useFormControlProvider(ownProps)\n\n    const className = cx(\"chakra-form-control\", props.className)\n\n    return (\n      <FormControlProvider value={context}>\n        <FormControlStylesProvider value={styles}>\n          <chakra.div\n            {...getRootProps({}, ref)}\n            className={className}\n            __css={styles[\"container\"]}\n          />\n        </FormControlStylesProvider>\n      </FormControlProvider>\n    )\n  },\n)\n\nFormControl.displayName = \"FormControl\"\n\nexport interface FormHelperTextProps extends HTMLChakraProps<\"div\"> {}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided.\n */\nexport const FormHelperText = forwardRef<FormHelperTextProps, \"div\">(\n  function FormHelperText(props, ref) {\n    const field = useFormControlContext()\n    const styles = useFormControlStyles()\n    const className = cx(\"chakra-form__helper-text\", props.className)\n    return (\n      <chakra.div\n        {...field?.getHelpTextProps(props, ref)}\n        __css={styles.helperText}\n        className={className}\n      />\n    )\n  },\n)\n\nFormHelperText.displayName = \"FormHelperText\"\n","import { ariaAttr, callAllHandlers } from \"@chakra-ui/shared-utils\"\nimport { FormControlOptions, useFormControlContext } from \"./form-control\"\n\nexport interface UseFormControlProps<T extends HTMLElement>\n  extends FormControlOptions {\n  id?: string\n  onFocus?: React.FocusEventHandler<T>\n  onBlur?: React.FocusEventHandler<T>\n  disabled?: boolean\n  readOnly?: boolean\n  required?: boolean\n  \"aria-describedby\"?: string\n}\n\n/**\n * React hook that provides the props that should be spread on to\n * input fields (`input`, `select`, `textarea`, etc.).\n *\n * It provides a convenient way to control a form fields, validation\n * and helper text.\n *\n * @internal\n */\nexport function useFormControl<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const { isDisabled, isInvalid, isReadOnly, isRequired, ...rest } =\n    useFormControlProps(props)\n\n  return {\n    ...rest,\n    disabled: isDisabled,\n    readOnly: isReadOnly,\n    required: isRequired,\n    \"aria-invalid\": ariaAttr(isInvalid),\n    \"aria-required\": ariaAttr(isRequired),\n    \"aria-readonly\": ariaAttr(isReadOnly),\n  }\n}\n\n/**\n * @internal\n */\nexport function useFormControlProps<T extends HTMLElement>(\n  props: UseFormControlProps<T>,\n) {\n  const field = useFormControlContext()\n\n  const {\n    id,\n    disabled,\n    readOnly,\n    required,\n    isRequired,\n    isInvalid,\n    isReadOnly,\n    isDisabled,\n    onFocus,\n    onBlur,\n    ...rest\n  } = props\n\n  const labelIds: string[] = props[\"aria-describedby\"]\n    ? [props[\"aria-describedby\"]]\n    : []\n\n  // Error message must be described first in all scenarios.\n  if (field?.hasFeedbackText && field?.isInvalid) {\n    labelIds.push(field.feedbackId)\n  }\n\n  if (field?.hasHelpText) {\n    labelIds.push(field.helpTextId)\n  }\n\n  return {\n    ...rest,\n    \"aria-describedby\": labelIds.join(\" \") || undefined,\n    id: id ?? field?.id,\n    isDisabled: disabled ?? isDisabled ?? field?.isDisabled,\n    isReadOnly: readOnly ?? isReadOnly ?? field?.isReadOnly,\n    isRequired: required ?? isRequired ?? field?.isRequired,\n    isInvalid: isInvalid ?? field?.isInvalid,\n    onFocus: callAllHandlers(field?.onFocus, onFocus),\n    onBlur: callAllHandlers(field?.onBlur, onBlur),\n  }\n}\n","import { FormControlOptions, useFormControl } from \"@chakra-ui/form-control\"\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useMultiStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\ninterface InputOptions {\n  /**\n   * The border color when the input is focused. Use color keys in `theme.colors`\n   * @example\n   * focusBorderColor = \"blue.500\"\n   */\n  focusBorderColor?: string\n  /**\n   * The border color when the input is invalid. Use color keys in `theme.colors`\n   * @example\n   * errorBorderColor = \"red.500\"\n   */\n  errorBorderColor?: string\n  /**\n   * The native HTML `size` attribute to be passed to the `input`\n   */\n  htmlSize?: number\n}\n\ntype Omitted = \"disabled\" | \"required\" | \"readOnly\" | \"size\"\n\nexport interface InputProps\n  extends Omit<HTMLChakraProps<\"input\">, Omitted>,\n    InputOptions,\n    ThemingProps<\"Input\">,\n    FormControlOptions {}\n\n/**\n * Input\n *\n * Element that allows users enter single valued data.\n *\n * @see Docs https://chakra-ui.com/docs/components/input\n */\nexport const Input = forwardRef<InputProps, \"input\">(function Input(\n  props,\n  ref,\n) {\n  const { htmlSize, ...rest } = props\n\n  const styles = useMultiStyleConfig(\"Input\", rest)\n  const ownProps = omitThemingProps(rest)\n  const input = useFormControl<HTMLInputElement>(ownProps)\n  const _className = cx(\"chakra-input\", props.className)\n\n  return (\n    <chakra.input\n      size={htmlSize}\n      {...input}\n      __css={styles.field}\n      ref={ref}\n      className={_className}\n    />\n  )\n})\n\nInput.displayName = \"Input\"\n\n// This is used in `input-group.tsx`\nInput.id = \"Input\"\n"],"names":["getContacts","state","contacts","items","getIsLoading","isLoading","getFilter","filter","ContactForm","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","className","css","onSubmit","e","preventDefault","findIndex","contact","alert","addContact","I","variant","focusBorderColor","type","pattern","title","required","placeholder","value","onChange","target","colorScheme","createContext","errorMessage","TableStylesProvider","useTableStyles","Table","props","forwardRef","ref","styles","useMultiStyleConfig","omitThemingProps","layout","tableProps","children","table","chakra","tableLayout","displayName","__css","cx","Thead","thead","Tr","tr","isNumeric","Th","rest","th","Tbody","tbody","Td","td","ContactList","visibleContacts","toLowerCase","includes","getVisibleContacts","borderWidth","borderColor","color","map","id","onClick","delContact","handleDelete","Filter","setFilter","Contacts","useEffect","fetchContacts","FormControlStylesProvider","useFormControlStyles","strict","FormControlProvider","useFormControlContext","useFormControlProvider","ownProps","idProp","getLabelProps","context","isRequired","isInvalid","isDisabled","isReadOnly","htmlProps","uuid","labelId","useId","feedbackId","helpTextId","hasFeedbackText","setHasFeedbackText","hasHelpText","setHasHelpText","isFocused","setFocus","getHelpTextProps","forwardedRef","useCallback","node","mergeRefs","htmlFor","getErrorMessageProps","dataAttr","getRootProps","role","getRequiredIndicatorProps","onFocus","onBlur","FormControl","div","field","helperText","useFormControlProps","ariaAttr","labelIds","readOnly","push","disabled","join","_a","_b","_c","useFormControl","callAllHandlers","htmlSize","input","size","Input"],"sourceRoot":""}